#!/usr/bin/python3

# savedesktop.in
#
# Copyright 2025 vikdevelop
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# SPDX-License-Identifier: GPL-3.0-or-later

import os
import sys
import subprocess
import argparse
import signal
import locale
import gettext

VERSION = '@VERSION@'
pkgdatadir = '@pkgdatadir@'
localedir = '@localedir@'

os.environ["SAVEDESKTOP_VERSION"] = VERSION
os.environ["SAVEDESKTOP_DIR"] = pkgdatadir
os.environ["SAVEDESKTOP_LOCALE"] = localedir

sys.path.insert(1, pkgdatadir)
signal.signal(signal.SIGINT, signal.SIG_DFL)
locale.bindtextdomain('savedesktop', localedir)
locale.textdomain('savedesktop')
gettext.install('savedesktop', localedir)

# Command-line arguments
parser = argparse.ArgumentParser()
parser.add_argument("--background", action="store_true", help="Start periodic saving")
parser.add_argument("--sync", action="store_true", help="Start synchronization")
parser.add_argument("--save-now", action="store_true", help="Save a configuration using UI parameters such as periodic saving folder, file name format and password for encryption.")
parser.add_argument("--save-without-archive", type=str, help="Save the configuration without an archive", dest="FOLDER_PATH")
parser.add_argument("--import-config", help="Import a configuration from a file (*.sd.zip or *.sd.tar.gz) or folder", type=str, dest="CFG_ARCHIVE_PATH")
cmd = parser.parse_args()

# Run Python scripts from the listed command-line arguments
if cmd.background: # start periodic saving
    from savedesktop.core.periodic_saving import PeriodicBackups
    pb = PeriodicBackups()
    pb.run(None)
elif cmd.sync: # sync a desktop configuration
    from savedesktop.core.synchronization import Syncing
elif cmd.save_now: # save a configuration using UI parameters
    from savedesktop.core.periodic_saving import PeriodicBackups
    pb = PeriodicBackups()
    pb.run(now=True)
elif cmd.FOLDER_PATH: # save a configuration without an archive
    folder_path = cmd.FOLDER_PATH
    os.makedirs(f"{CACHE}/save_config", exist_ok=True)
    os.chdir(f"{CACHE}/save_config")
    os.system(f"python3 {init_dir}/config.py --save")
    print(f"moving the configuration folder to the {folder_path} folder")
    os.system(f"echo > {CACHE}/save_config/SELECT_THIS_FILE_TO_IMPORT_CFG && mv {CACHE}/save_config '{cmd.FOLDER_PATH}/configuration_{date.today()}'")
elif cmd.CFG_ARCHIVE_PATH: # import a configuration from a file, or folder
    file_path = cmd.CFG_ARCHIVE_PATH
    if not os.path.exists(file_path):
        print(f"File not found: {file_path}")
        exit(1)

    shutil.rmtree(os.path.join(CACHE, "import_config"), ignore_errors=True)
    os.makedirs(os.path.join(CACHE, "import_config"), exist_ok=True)
    os.chdir(os.path.join(CACHE, "import_config"))

    if file_path.endswith('.sd.zip'):
        os.system(f"unzip {file_path}")
    elif file_path.endswith('.sd.tar.gz'):
        os.system(f"tar -xf {file_path}")
    elif os.path.exists(f"{file_path}/.folder.sd"):
        shutil.copytree(file_path, f"{CACHE}/import_config", dirs_exist_ok=True, ignore_dangling_symlinks=True)
    else:
        print("Unsupported file type. Use *.sd.zip, *.sd.tar.gz or folder which contains the \".folder.sd\" file.")
        exit(1)

    subprocess.run([sys.executable, "-m", "savedesktop.core.config", "--import_"], check=True, env={**os.environ, "PYTHONPATH": "/app/share/savedesktop"})
else: # show the app window
    import gi

    from gi.repository import Gio
    resource = Gio.Resource.load(os.path.join(pkgdatadir, 'savedesktop.gresource'))
    resource._register()

    from savedesktop import main
